buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = '1.1.0.0'
group = 'ru.timeconqueror' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'TimeCore'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    main {
        ext.refMap = "mixins.timecore.refmap.json"
    }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'stable', version: '56-1.14.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            //property 'forge.logging.console.level', 'debug'

            args "--mixin mixins.timecore.json"

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            //property 'forge.logging.console.level', 'debug'

            args "--mixin mixins.timecore.json"

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
//            property 'forge.logging.console.level', 'debug'

            args "--mixin mixins.timecore.json", '--mod', 'timecore', '--all', '--output', file('src/generated/resources/')

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }
    }
}

repositories {
    flatDir {
        dirs 'runtimeMods'
    }
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
    mavenCentral()
}

configurations {
    // configuration that holds jars to include in the jar
    shade
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.14.4-28.2.3'

//    implementation fg.deobf("mcp.mobius.waila:Hwyla:forge-1.10.6-B67_1.14.4")

    file("runtimeMods").eachFile { file ->
        def splitPos = file.name.lastIndexOf("-")
        def modartifact = file.name.substring(0, splitPos)
        def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
        def modreference = "lib:$modartifact:$modversion"

        dependencies {
            runtimeOnly fg.deobf(project.dependencies.create(modreference) {
                transitive = false
            })
        }
    }

    //noinspection GroovyAssignabilityCheck
    shade implementation('org.spongepowered:mixin:0.8-SNAPSHOT') {
        // Mixin includes a lot of dependencies that are too up-to-date
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }

    implementation 'org.jetbrains:annotations:18.0.0'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF/*.RSA'
        }
    }

    rename 'LICENSE.txt', 'LICENSE-MIXINS.txt'
    from('LICENSE.md')

    manifest {
        attributes([
                "Specification-Title"        : "timecore",
                "Specification-Vendor"       : "Time_Conqueror",
                "Specification-Version"      : "1", // We are version 1 of ourselves
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : "${version}",
                "Implementation-Vendor"      : "Time_Conqueror",
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),

                "TweakClass"                 : "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs"               : "mixins.timecore.json",
                "ForceLoadAsMod"             : true,
                "FMLCorePluginContainsFMLMod": "true"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
def devArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    classifier 'dev'
    builtBy 'devJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
            artifact devArtifact
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/build/libs/"
        }
    }
}

// Create source attachment for dev jar
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task devJar(type: Jar) {
    exclude '*.json'
//    finalizedBy reobfJar
}

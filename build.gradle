buildscript {
    repositories {
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup "org.spongepowered" }
        }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.22'
}

apply plugin: 'org.spongepowered.mixin'

apply from: 'gradle/scripts/configs.gradle'
apply from: 'gradle/scripts/version_handler.gradle'

version = versionGetter.get()
group = 'ru.timeconqueror'
archivesBaseName = 'TimeCore'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
    add sourceSets.main, "mixins.timecore.refmap.json"
    config "mixins.timecore.json"

//    addManualRefmap("src/main/resources/manual_refmap.json")

    debug = true
    debug.verbose = true
    debug.countInjections = true
    debug.export = true
    checks.interfaces = true
}

repositories {
    flatDir {
        dirs 'runtimeMods'
    }
    mavenCentral()
    mavenLocal()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/repository/maven-public'
    }
    maven {
        name = "TimeConqueror's Maven"
        url = "https://repo.repsy.io/mvn/timeconqueror/mc/"
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

// Allows to 3rd libraries be added to dev workspace
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

minecraft {
    mappings channel: 'parchment', version: '1-1.19.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    def extraArgs = []
    def extraVmArgs = []
    runs {
        client {
            workingDirectory project.file('run')

//            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test

                    resource sourceSets.main.resources
                    resource sourceSets.test.resources
                }
            }
        }

        server {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'REGISTRIES'

            //property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test

                    resource sourceSets.main.resources
                    resource sourceSets.test.resources
                }
            }
        }

        data {
            workingDirectory project.file('run')

//            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'timecore', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test

                    resource sourceSets.main.resources
                    resource sourceSets.test.resources
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    //library - 3rd-party library (not a mod)
    //shade - dep that should be shaded
    implementation.extendsFrom(library)
    library.extendsFrom(shade)
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.6'

    if (file("runtimeMods").exists()) {
        file("runtimeMods").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            def modreference = "lib:$modartifact:$modversion"

            dependencies {
                implementation fg.deobf(project.dependencies.create(modreference) {
                    transitive = false
                })
            }
        }
    }

    implementation 'thedarkcolour:kotlinforforge:3.12.0'

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor("org.spongepowered:mixin:0.8.5:processor")
    }
}

jar {
    archiveClassifier.set("")
    from sourceSets.main.output

    manifest {
        attributes([
                "Specification-Title"     : "timecore",
                "Specification-Vendor"    : "Time_Conqueror",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Time_Conqueror",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }

    finalizedBy('reobfJar')
}

// Create source attachment for dev jar
task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    it.archiveClassifier = 'sources'
}


processResources {
    exclude 'manual_refmap.json'
}

def inProjectMaven = "${project.projectDir.absolutePath.replace("\\", "/")}/maven"

publishing {
    publications {
        maven(MavenPublication) { p ->
            artifactId archivesBaseName
            artifact jar
            artifact sourcesJar

            pom.withXml {
                project.configurations.named('implementation') {
                    for (final def dep in dependencies) {
                        if (dep.name == 'kotlinforforge') {
                            def dependenciesNode = asNode().appendNode('dependencies')
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url inProjectMaven
        }
        if (secretProps != null) {
            maven {
                url "https://repo.repsy.io/mvn/${secretProps.repsy.user}/${secretProps.repsy.repo_name}"
                credentials {
                    username secretProps.repsy.login
                    password secretProps.repsy.password
                }
            }
        }
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '17'
        languageVersion = '1.8'
        freeCompilerArgs = Arrays.asList("-Xjvm-default=all", "-opt-in=kotlin.RequiresOptIn")
    }
}

task printVersion {
    println("Compiled version: $version")
}

publish.finalizedBy(printVersion)

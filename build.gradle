import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    // OPTIONAL Kotlin Serialization plugin
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.22'
    id 'org.jetbrains.kotlin.plugin.lombok' version '1.8.22'
    id "io.freefair.lombok" version "8.0.1"
    id 'com.github.johnrengelman.shadow' version "7.1.2"
}

apply plugin: 'org.spongepowered.mixin'

apply from: 'gradle/scripts/configs.gradle'
apply from: 'gradle/scripts/version_handler.gradle'

def mod_version = versionGetter.get()
version = minecraft_version + '-' + mod_version
group = mod_group_id
archivesBaseName = mod_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    config "mixins.${mod_id}.json"

//    addManualRefmap("src/main/resources/manual_refmap.json")

    debug = true
    debug.verbose = true
    debug.countInjections = true
    debug.export = true
    checks.interfaces = true
}

repositories {
    flatDir {
        dirs 'runtimeMods'
    }
    mavenCentral()
    mavenLocal()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/repository/maven-public'
    }
    maven {
        name = "TimeConqueror's Maven"
        url = "https://repo.repsy.io/mvn/timeconqueror/mc/"
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

configurations {
    shade
    implementation.extendsFrom(shade)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true
    def extraArgs = []
    def extraVmArgs = []
    runs {
        client {
            workingDirectory project.file('run')

//            property 'forge.logging.markers', 'REGISTRIES'
            property 'timecore.logging.markers', 'ANIMATION'

            property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'REGISTRIES'

            //property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        data {
            workingDirectory project.file('run')

//            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        configureEach {
            lazyToken('minecraft_classpath') {
                configurations.shade.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${forge_version}"

    if (file("runtimeMods").exists()) {
        file("runtimeMods").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            def modreference = "lib:$modartifact:$modversion"

            dependencies {
                implementation fg.deobf(project.dependencies.create(modreference) {
                    transitive = false
                })
            }
        }
    }

    implementation 'thedarkcolour:kotlinforforge:4.10.0'
    shade('gg.moonflower:molang-compiler:3.1.0-customized.1') {
        exclude group: "org.ow2.asm", module: "asm-tree"
    }

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor("org.spongepowered:mixin:0.8.5:processor")
    }

    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
}

jar {
    archiveClassifier.set("")
    from sourceSets.main.output

    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }

    finalizedBy('reobfJar')
}

// Create source attachment for dev jar
task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    it.archiveClassifier = 'sources'
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'gg.moonflower.molangcompiler', 'tcrepack.gg.moonflower.molangcompiler'
    finalizedBy('reobfShadowJar')
    archiveClassifier.set("")
}

reobf {
    shadowJar {}
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version       : forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors         : mod_authors,
        kff_version_range: kff_version_range
]

processResources {
    exclude 'manual_refmap.json'

    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}


def inProjectMaven = "${project.projectDir.absolutePath.replace("\\", "/")}/maven"

publishing {
    publications {
        maven(MavenPublication) { p ->
            artifactId archivesBaseName
            artifact shadowJar
            artifact sourcesJar

            pom.withXml {
                project.configurations.named('implementation') {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    for (final def dep in dependencies) {
                        if (dep.name == 'kotlinforforge' || dep.name == 'molang-compiler') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url inProjectMaven
        }
        if (secretProps != null) {
            maven {
                url "https://repo.repsy.io/mvn/${secretProps.repsy.user}/${secretProps.repsy.repo_name}"
                credentials {
                    username secretProps.repsy.login
                    password secretProps.repsy.password
                }
            }
        }
    }
}

tasks.named('compileKotlin', KotlinCompilationTask.class) {
    compilerOptions {
        freeCompilerArgs = Arrays.asList("-Xjvm-default=all", "-opt-in=kotlin.RequiresOptIn")
    }
}

task printVersion {
    println("Compiled version: $version")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

publish.finalizedBy(printVersion)

test {
    useJUnitPlatform()
}

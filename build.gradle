buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        jcenter()
        mavenCentral()
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/repository/maven-public'
        }
        maven {
            name = "TimeConqueror's Maven"
            url = "https://repo.repsy.io/mvn/timeconqueror/mc/"
        }
    }
    dependencies {
//        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.7-patched'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT-patched'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.31"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

apply from: 'gradle/scripts/configs.gradle'
apply from: 'gradle/scripts/version_handler.gradle'

version = versionGetter.get()
group = 'ru.timeconqueror' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'TimeCore'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

mixin {
    add sourceSets.main, "mixins.timecore.refmap.json"

    addManualRefmap("src/main/resources/manual_refmap.json")
}

repositories {
    flatDir {
        dirs 'runtimeMods'
    }
    mavenCentral()
    mavenLocal()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/repository/maven-public'
    }
    maven {
        name = "TimeConqueror's Maven"
        url = "https://repo.repsy.io/mvn/timeconqueror/mc/"
    }
}

minecraft {
    // Mappings used are generated by Mappificator (https://github.com/alcatrazEscapee/mappificator)
    // See the project README page for how to generate the mapping set.
    // Otherwise, we use official mappings in a build script version
    def officialVersion = System.getenv("OFFICIAL_MAPPINGS")
    if (officialVersion == null) {
        mappings channel: 'snapshot', version: buildProps.snapshot_mappings
    } else {
        mappings channel: 'official', version: buildProps.mc_version
    }
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.,
    def extraArgs = new ArrayList<>(Arrays.asList('--mixin mixins.timecore.json'.split(' ')))
    def extraVmArgs = Arrays.asList('-Dmixin.debug.countInjections=true', '-Dmixin.debug.verbose=true')
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test

                    resource sourceSets.main.resources
                    resource sourceSets.test.resources
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            //property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test

                    resource sourceSets.main.resources
                    resource sourceSets.test.resources
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'timecore', '--all', '--output', ("\"" + projectDir.path + "/src/generated/resources/\"")
            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test

                    resource sourceSets.main.resources
                    resource sourceSets.test.resources
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    // configuration that holds jars to include in the jar
    implementation.extendsFrom(shade)
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.32'

    if (file("runtimeMods").exists()) {
        file("runtimeMods").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            def modreference = "lib:$modartifact:$modversion"

            dependencies {
                implementation fg.deobf(project.dependencies.create(modreference) {
                    transitive = false
                })
            }
        }
    }

    shade 'org.jetbrains:annotations:20.1.0'

    shade "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    shade "org.jetbrains.kotlin:kotlin-reflect"

//    annotationProcessor("org.spongepowered:mixin:0.8.3-SNAPSHOT-patched:processor")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.main.output

    exclude()

    from { configurations.shade.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes([
                "Specification-Title"        : "timecore",
                "Specification-Vendor"       : "Time_Conqueror",
                "Specification-Version"      : "1", // We are version 1 of ourselves
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : archiveVersion,
                "Implementation-Vendor"      : "Time_Conqueror",
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),

                "MixinConfigs"               : "mixins.timecore.json"
        ])
    }

    finalizedBy('reobfJar')
}

reobf.create('devJar')

task devJar(type: Jar) {
    from sourceSets.main.output

    it.archiveClassifier = 'dev'

    manifest {
        attributes([
                "Specification-Title"        : "timecore",
                "Specification-Vendor"       : "Time_Conqueror",
                "Specification-Version"      : "1", // We are version 1 of ourselves
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : archiveVersion,
                "Implementation-Vendor"      : "Time_Conqueror",
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),

                "MixinConfigs"               : "mixins.timecore.json"
        ])
    }

    finalizedBy('reobfDevJar')
}

// Create source attachment for dev jar
task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    it.archiveClassifier = 'sources'
}


processResources {
    exclude 'manual_refmap.json'
}

def mavenLink1 = "C:/IJ Projects/Maven"
def inProjectMaven = "${project.projectDir.absolutePath.replace("\\", "/")}/maven"

def mavenLinkRepsy = "https://repo.repsy.io/mvn/${secretProps.repsy.user}/${secretProps.repsy.repo_name}"

publishing {
    publications {
        mavenJava(MavenPublication) {p ->

            artifact jar
            artifact devJar
            artifact sourcesJar

//            pom.withXml {
//                def dependenciesNode = asNode().appendNode('dependencies')
//
//                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
//                configurations.customCompile.allDependencies.each {
//                    def dependencyNode = dependenciesNode.appendNode('dependency')
//                    dependencyNode.appendNode('groupId', it.group)
//                    dependencyNode.appendNode('artifactId', it.name)
//                    dependencyNode.appendNode('version', it.version)
//                }
//                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
//                configurations.shade.allDependencies.each {
//                    def dependencyNode = dependenciesNode.appendNode('dependency')
//                    dependencyNode.appendNode('groupId', it.group)
//                    dependencyNode.appendNode('artifactId', it.name)
//                    dependencyNode.appendNode('version', it.version)
//                }
//
//                def repositoriesNode = asNode().appendNode('repositories')
//
//                def repoSpongeNode = repositoriesNode.appendNode('repository')
//                repoSpongeNode.appendNode('name', 'Sponge Repo')
//                repoSpongeNode.appendNode('url', 'https://repo.spongepowered.org/maven')
//            }
        }
    }
    repositories {
        maven {
            url mavenLink1
        }
        maven {
            url inProjectMaven
        }
        if(secretProps != null) {
            maven {
                url mavenLinkRepsy
                credentials {
                    username secretProps.repsy.user
                    password secretProps.repsy.password
                }
            }
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = Arrays.asList("-Xjvm-default=all")
        jvmTarget = "1.8"
        languageVersion = "1.4"
    }
}

task printVersion {
    println("Compiled version: $version")
}

publish.finalizedBy(printVersion)

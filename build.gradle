buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

apply from: 'gradle/scripts/configs.gradle'
apply from: 'gradle/scripts/version_handler.gradle'

version = versionGetter.get()
group = 'ru.timeconqueror' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'TimeCore'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    main {
        ext.refMap = "mixins.timecore.refmap.json"
    }
}

repositories {
    flatDir {
        dirs 'runtimeMods'
    }
    mavenCentral()
    mavenLocal()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
}

minecraft {
    // Mappings used are generated by Mappificator (https://github.com/alcatrazEscapee/mappificator)
    // See the project README page for how to generate the mapping set.
    // Otherwise, we use official mappings in a build script version
    def officialVersion = System.getenv("OFFICIAL_MAPPINGS")
    if (officialVersion == null) {
        mappings channel: 'snapshot', version: buildProps.snapshot_mappings
    } else {
        mappings channel: 'official', version: buildProps.mc_version
    }
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.,
    def extraArgs = new ArrayList<>(Arrays.asList('--mixin mixins.timecore.json'.split(' ')))
    def extraVmArgs = Arrays.asList('-Dmixin.debug.countInjections=true', '-Dmixin.debug.verbose=true')
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test

                    resource sourceSets.main.resources
                    resource sourceSets.test.resources
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            //property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test

                    resource sourceSets.main.resources
                    resource sourceSets.test.resources
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'timecore', '--all', '--output', ("\"" + projectDir.path + "/src/generated/resources/\"")
            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test

                    resource sourceSets.main.resources
                    resource sourceSets.test.resources
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    // configuration that holds jars to include in the jar
    implementation.extendsFrom(shade)
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.7'

    if (file("runtimeMods").exists()) {
        file("runtimeMods").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            def modreference = "lib:$modartifact:$modversion"

            dependencies {
                runtimeOnly fg.deobf(project.dependencies.create(modreference) {
                    transitive = false
                })
            }
        }
    }

    implementation 'org.jetbrains:annotations:18.0.0'

    shade "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    shade "org.jetbrains.kotlin:kotlin-reflect"

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile("org.spongepowered:mixin:0.8") {
        transitive = false
    }

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.main.output

    from { configurations.shade.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes([
                "Specification-Title"        : "timecore",
                "Specification-Vendor"       : "Time_Conqueror",
                "Specification-Version"      : "1", // We are version 1 of ourselves
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : version,
                "Implementation-Vendor"      : "Time_Conqueror",
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),

                "MixinConfigs"               : "mixins.timecore.json"
        ])
    }

    finalizedBy('reobfJar')
}

reobf.create('devJar')

def devClassifier = new String('mojang-' + buildProps.snapshot_mappings)
task devJar(type: Jar) {
    from sourceSets.main.output

    classifier = devClassifier

    manifest {
        attributes([
                "Specification-Title"        : "timecore",
                "Specification-Vendor"       : "Time_Conqueror",
                "Specification-Version"      : "1", // We are version 1 of ourselves
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : version,
                "Implementation-Vendor"      : "Time_Conqueror",
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),

                "MixinConfigs"               : "mixins.timecore.json"
        ])
    }

    finalizedBy('reobfDevJar')
}

// Create source attachment for dev jar
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

def mavenLink1 = "C:/IJ Projects/Maven"
def mavenLink2 = "${project.projectDir.absolutePath.replace("\\", "/")}/maven"

def mavenLinkRepsy = "https://repo.repsy.io/mvn/${secretProps.repsy.user}/${secretProps.repsy.repo_name}"

publishing {
    publications {
        mavenJava(MavenPublication) {p ->
            artifact jar
            artifact devJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url mavenLink1
        }
        maven {
            url mavenLink2
        }
        if(secretProps != null) {
            maven {
                url mavenLinkRepsy
                credentials {
                    username secretProps.repsy.user
                    password secretProps.repsy.password
                }
            }
        }
    }
}

task deobfPublishedDevJar(type: Exec) {
    workingDir "python/scripts"

    commandLine 'python', 'deobfuscator.py', '--paths', "$mavenLink1/ru/timeconqueror/$archivesBaseName/$version/$archivesBaseName-$version-${devClassifier}.jar, $mavenLink2/ru/timeconqueror/$archivesBaseName/$version/$archivesBaseName-$version-${devClassifier}.jar"
}
publish.finalizedBy(deobfPublishedDevJar)
